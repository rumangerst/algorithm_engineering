Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: matmat(double, bool, const double *, int, int, int, const double *, int, int, double, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/ruman/u2/matmat.cpp(23,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/ruman/u2/matmat.cpp(25,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/ruman/u2/matmat.cpp(32,7)
         remark #15415: vectorization support: gather was generated for the variable a:  strided by non-constant value   [ /home/ruman/u2/matmat.cpp(34,37) ]
         remark #15415: vectorization support: gather was generated for the variable b:  strided by non-constant value   [ /home/ruman/u2/matmat.cpp(35,29) ]
         remark #15305: vectorization support: vector length 16
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.202
         remark #15300: LOOP WAS VECTORIZED
         remark #15460: masked strided loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 5.250 
         remark #15478: estimated potential speedup: 3.670 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /home/ruman/u2/matmat.cpp(32,7)
      <Remainder loop for vectorization>
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /home/ruman/u2/matmat.cpp(32,7)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference a has unaligned access   [ /home/ruman/u2/matmat.cpp(34,29) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.800
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /home/ruman/u2/matmat.cpp(32,7)
         remark #15388: vectorization support: reference a has aligned access   [ /home/ruman/u2/matmat.cpp(34,29) ]
         remark #15415: vectorization support: gather was generated for the variable b:  strided by non-constant value   [ /home/ruman/u2/matmat.cpp(35,29) ]
         remark #15305: vectorization support: vector length 16
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.367
         remark #15300: LOOP WAS VECTORIZED
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 3.750 
         remark #15478: estimated potential speedup: 4.610 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /home/ruman/u2/matmat.cpp(32,7)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference a has aligned access   [ /home/ruman/u2/matmat.cpp(34,29) ]
         remark #15388: vectorization support: reference a has aligned access   [ /home/ruman/u2/matmat.cpp(34,29) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.139
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END
===========================================================================
